<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LeetCode | Ryan Hao]]></title>
  <link href="http://ryanhao.github.io/blog/categories/leetcode/atom.xml" rel="self"/>
  <link href="http://ryanhao.github.io/"/>
  <updated>2013-11-27T14:34:26+08:00</updated>
  <id>http://ryanhao.github.io/</id>
  <author>
    <name><![CDATA[Ryan Hao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode OJ 008 String to Integer (atoi)]]></title>
    <link href="http://ryanhao.github.io/blog/2013/11/27/leetcode-oj-008-string-to-integer-atoi/"/>
    <updated>2013-11-27T14:07:03+08:00</updated>
    <id>http://ryanhao.github.io/blog/2013/11/27/leetcode-oj-008-string-to-integer-atoi</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://oj.leetcode.com/problems/string-to-integer-atoi/">String to Integer (atoi) 字符串转换为整数</a></p></blockquote>

<h3>Description:</h3>

<blockquote><p>Implement atoi to convert a string to an integer.</p></blockquote>

<ul>
<li><strong>Hint:</strong>

<blockquote><p>Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p></blockquote></li>
<li><strong>Notes:</strong>

<blockquote><p>It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p></blockquote></li>
</ul>


<!--more-->


<ul>
<li><strong>Requirements for atoi:</strong>

<blockquote><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.<br/>
The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.<br/>
If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.<br/>
If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p></blockquote></li>
</ul>


<h3>描述:</h3>

<blockquote><p>实现atoi来把字符串string转换为整数integer。</p></blockquote>

<ul>
<li><strong>提示:</strong>

<blockquote><p>仔细考虑输入的所有可能情况。如果你想要挑战一下，请不要继续向下看，问问自己输入有哪些情况。</p></blockquote></li>
<li><strong>注意:</strong>

<blockquote><p>本问题的目的是不给出输入的详细情况。由你来负责考虑输入要求。</p></blockquote></li>
<li><strong>atoi的要求:</strong>

<blockquote><p>首先忽略前置空格。<br/>
字符串中数字后面可以包含其他字符，但是这些字符被忽视。<br/>
如果前置空格后紧跟着的不是数字或正负符号，或者字符串为空，或者只包含空格，则不需要进行转换。<br/>
如果数字溢出则返回INT_MAX(2147483647)或者INT_MIN(-2147483648)。</p></blockquote></li>
</ul>


<h3>思路:</h3>

<blockquote><p>先滤去前置空格，再记录正负符号，再滤去前导0。
记录数字，若溢出则根据正负符号返回INT_MAX(2147483647)或者INT_MIN(-2147483648)。</p></blockquote>

<h3>代码:</h3>

<p>```cpp Reverse Integer
class Solution {
public:</p>

<pre><code>int atoi(const char *str) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    bool positive = true;
    const char *p=str;
    for(; *p==' '; p++) {
    }
    if(*p=='-') {
        positive = false;
        p++;
    }
    if(*p=='+') {
        p++;
    }
    for(; *p=='0'; p++) {
    }

    int result = 0;
    for(; p; p++) {
        if(*p&lt;48 || *p&gt;57) {
            break;
        }
        if(result &gt; (INT_MAX-(*p-48))/10) {
            if(positive) {
                return INT_MAX;
            } else {
                return INT_MIN;
            }
        }
        result = result*10+(*p-48);
    }
    if(!positive) {
        result *= -1;
    }
    return result;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode OJ 007 Reverse Integer]]></title>
    <link href="http://ryanhao.github.io/blog/2013/11/25/leetcode-oj-007-reverse-integer/"/>
    <updated>2013-11-25T20:12:54+08:00</updated>
    <id>http://ryanhao.github.io/blog/2013/11/25/leetcode-oj-007-reverse-integer</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://oj.leetcode.com/problems/reverse-integer/#">Reverse Integer 整数倒转</a></p></blockquote>

<h3>Description:</h3>

<blockquote><p>Reverse digits of an integer.<br/>
Example1: x = 123, return 321<br/>
Example2: x = -123, return -321</p></blockquote>

<h4><em>Have you thought about this?</em></h4>

<blockquote><p>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!<br/>
If the integer&rsquo;s last digit is 0, what should the output be? ie, cases such as 10, 100.<br/>
Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer,<br/>
then the reverse of 1000000003 overflows. How should you handle such cases?<br/>
Throw an exception? Good, but what if throwing an exception is not an option?<br/>
You would then have to re-design the function (ie, add an extra parameter).</p></blockquote>

<!--more-->


<h3>描述:</h3>

<blockquote><p>反转一个整数的数字位。<br/>
例1: x = 123, return 321<br/>
例2: x = -123, return -321</p></blockquote>

<h4><em>你有想过吗？</em></h4>

<blockquote><p>以下是在编写代码之前值得想一下的问题，如果你已经想到了，给你一个Yes!<br/>
如果整数的后几位是0，那么反转之后是多少？比如10，100。<br/>
你有注意到吗，一些数字反转后会出现溢出现象。<br/>
假设输入时32字节的整数，那么反转1000000003就会出现溢出，应该怎么处理呢？<br/>
抛出一个异常？很好，如果不允许抛出异常呢？<br/>
那么你需要重新设计这个函数了(添加一个额外的参数)。</p></blockquote>

<h3>思路:</h3>

<blockquote><p>先记录输入数字的正负情况，然后将其转换成正数来处理。<br/>
每次取输入数字的最后一位加到输出结果的后面一位。<br/>
如果输入为整数，计算出的输出为负数，则出现溢出。</p></blockquote>

<h3>代码:</h3>

<p>```cpp Reverse Integer
class Solution {
public:</p>

<pre><code>int reverse(int x) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    bool positive = true;
    if(x &lt; 0) {
        positive = false;
        x = -x;
    }
    int result = 0;
    while(x) {
        result = result*10 + x%10;
        x /= 10;
    }
    if(result&lt;0) {
        return -1;
    }
    if(!positive) {
        result *= -1;
    }
    return result;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode OJ 006 ZigZag Conversion]]></title>
    <link href="http://ryanhao.github.io/blog/2013/11/24/leetcode-oj-006-zigzag-conversion/"/>
    <updated>2013-11-24T17:21:00+08:00</updated>
    <id>http://ryanhao.github.io/blog/2013/11/24/leetcode-oj-006-zigzag-conversion</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://oj.leetcode.com/problems/zigzag-conversion/">ZigZag Conversion 曲折转换</a></p></blockquote>

<h3>Description:</h3>

<blockquote><p>The string &ldquo;ABCDEFGHIJKLMNOPQRSTUVWXYZ&rdquo; is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<img src="http://d.pcs.baidu.com/thumbnail/a9ba33f12fcfe6a7d9e3f315261bce59?fid=1143547140-250528-3948537019&amp;time=1385362695&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-7irKweMUkN05KRPJ9g9Foc771Qw%3D&amp;expires=8h&amp;r=983511197&amp;size=c850_u580&amp;quality=100" alt="zigzag.png" /><br/>
And then read line by line: &ldquo;AKUBJLTVCIMSWDHNRXEGOQYFPZ"<br/>
Write the code that will take a string and make this conversion given a number of rows:<br/>
string convert(string text, int nRows);<br/>
convert("ABCDEFGHIJKLMNOPQRSTUVWXYZ&rdquo;, 6) should return &ldquo;AKUBJLTVCIMSWDHNRXEGOQYFPZ&rdquo;.</p></blockquote>

<!--more-->


<h3>描述:</h3>

<blockquote><p>字符串"ABCDEFGHIJKLMNOPQRSTUVWXYZ"按给定的行数以zigzag的模式书写，如下图：<br/>
<img src="http://d.pcs.baidu.com/thumbnail/a9ba33f12fcfe6a7d9e3f315261bce59?fid=1143547140-250528-3948537019&amp;time=1385362695&amp;rt=pr&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-7irKweMUkN05KRPJ9g9Foc771Qw%3D&amp;expires=8h&amp;r=983511197&amp;size=c850_u580&amp;quality=100" alt="zigzag.png" /><br/>
然后按行读，得到字符串"AKUBJLTVCIMSWDHNRXEGOQYFPZ"<br/>
编程实现这种变换。<br/>
convert(&ldquo;ABCDEFGHIJKLMNOPQRSTUVWXYZ&rdquo;, 6)应返回 &ldquo;AKUBJLTVCIMSWDHNRXEGOQYFPZ"。</p></blockquote>

<h3>思路:</h3>

<blockquote><p>一个向下和斜向上组合在一块称作一个zig，则zigSize = 2*nRow-2<br/>
特殊情况:当nRows为1时，直接返回原字符串。<br/>
每个zig的第一行和最后一行只有1个字符，其他行有2个字符。</p></blockquote>

<h3>代码:</h3>

<p>```cpp ZigZag Conversion
class Solution {
public:</p>

<pre><code>string convert(string s, int nRows) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    if (s == "") {
        return "";
    } else if (nRows == 1) {
        return s;
    }
    int zigSize = 2 * nRows - 2;
    char **p = new char *[nRows];
    int nColumn = 2 * (s.size() / zigSize + 1);
    for (int i = 0; i &lt; nRows; i++) {
        p[i] = new char[nColumn];
        for (int j = 0; j &lt; nColumn; j++) {
            p[i][j] = '#';
        }
    }
    int row = 0;
    int column = 0;
    int j = 0;
    for (int i = 0; i &lt; s.size(); i++) {
        j = i % zigSize;
        if (j &lt; nRows) {
            row = j;
        } else {
            row = zigSize - j;
        }
        if (j == 0 || j == nRows - 1) {
            column = i / zigSize;
        } else {
            if (j &lt; nRows) {
                column = (i / zigSize) * 2;
            } else {
                column = (i / zigSize) * 2 + 1;
            }
        }
        p[row][column] = s[i];
    }

    string result(s.size(), '#');
    int pResult = 0;
    for (int i = 0; i &lt; nRows; i++) {
        for (int j = 0; j &lt; nColumn; j++) {
            cout &lt;&lt; p[i][j] &lt;&lt; " ";
        }
        cout &lt;&lt; endl;
    }
    for (int i = 0; i &lt; nRows; i++) {
        for (int j = 0; j &lt; nColumn; j++) {
            if (p[i][j] == '#') {
                break;
            } else {
                result[pResult++] = p[i][j];
            }
        }
    }
    return result;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode OJ 005 Longest Palidromic Substring]]></title>
    <link href="http://ryanhao.github.io/blog/2013/11/23/leetcode-oj-005-longest-palidromic-substring/"/>
    <updated>2013-11-23T20:35:00+08:00</updated>
    <id>http://ryanhao.github.io/blog/2013/11/23/leetcode-oj-005-longest-palidromic-substring</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://oj.leetcode.com/problems/longest-palindromic-substring/">Longest Palindromic Substring 最长回文子串</a></p></blockquote>

<h3>Description:</h3>

<blockquote><p>Given a string S, find the longest palindromic substring in S. <br/>
You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p></blockquote>

<!--more-->


<h3>描述：</h3>

<blockquote><p>给定一个字符串S，找出S中的最长回文子串。<br/>
你可以假设字符串的最大长度为1000，其中有且只有一个最长回文子串。</p></blockquote>

<h3>思路</h3>

<blockquote><p>Manacher算法</p></blockquote>

<h3>代码</h3>

<p>```cpp Longest Palidromic Substring
class Solution {
public:</p>

<pre><code>string longestPalindrome(string s) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int longSize = s.size() * 2 + 2;
    string sLong = string(longSize, '#');
    sLong[0] = '$';
    for (int i = 0; i &lt; s.size(); i++) {
        sLong[i * 2 + 2] = s[i];
    }
    int *radi = new int[longSize];
    for (int i = 0; i &lt; longSize; i++) {
        radi[i] = 0;
    }

    int high = 0;
    int i = 0;
    int cur = 0;

    for (i = 1; i &lt; longSize; i++) {
        if (high &gt; i) {
            radi[i] = min(radi[2 * cur - i], high - i);
        } else {
            radi[i] = 1;
        }
        while (sLong[i - radi[i]] == sLong[i + radi[i]]) {
            radi[i]++;
        }
        if (i + radi[i] &gt; high) {
            cur = i;
            high = i + radi[i];
        }
    }

    int max = 1;
    int pos = 1;
    for (int i = 1; i &lt; longSize; i++) {
        if (radi[i] &gt; max) {
            max = radi[i];
            pos = i;
        }
    }

    int start = 0;
    int subLen = 0;
    if (pos % 2 == 0) {
        pos = (pos - 2) / 2;
        max = max / 2;
        subLen = max * 2 - 1;
    } else {
        pos = (pos - 3) / 2;
        max = (max - 1) / 2;
        subLen = max * 2;
    }
    start = pos - max + 1;
    return s.substr(start, subLen);
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode OJ 004 Add Two Numbers]]></title>
    <link href="http://ryanhao.github.io/blog/2013/11/22/leetcode-oj-004-add-two-numbers/"/>
    <updated>2013-11-22T14:46:00+08:00</updated>
    <id>http://ryanhao.github.io/blog/2013/11/22/leetcode-oj-004-add-two-numbers</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://oj.leetcode.com/problems/add-two-numbers/">Add Two Numbers 两数相加</a></p></blockquote>

<h3>Description:</h3>

<blockquote><p>You are given two linked lists representing two non-negative numbers.<br/>
The digits are stored in reverse order and each of their nodes contain a single digit.<br/>
Add the two numbers and return it as a linked list.</p></blockquote>

<!--more-->


<h3>描述：</h3>

<blockquote><p>给定两个表示两个非负数的链表。<br/>
其中数字位按倒序存放，每个链表结点存放一位数字。<br/>
将这两个数加到一起以链表形式返回。</p></blockquote>

<h3>Input:</h3>

<blockquote><p>(2 &ndash;> 4 &ndash;> 3) + (5 &ndash;> 6 &ndash;> 4)</p></blockquote>

<h3>Output:</h3>

<blockquote><p>7 &ndash;> 0 &ndash;> 8</p></blockquote>

<h3>思路</h3>

<blockquote><ul>
<li>两次遍历：

<blockquote><p>第一次遍历加在一块，第二次遍历处理进位。</p></blockquote></li>
<li>一次遍历：

<blockquote><p>用一个变量存放进位。</p></blockquote></li>
</ul>
</blockquote>

<h3>代码</h3>

<p>```cpp ListNode
struct ListNode {</p>

<pre><code>int val;
ListNode *next;
ListNode(int x) : val(x), next(NULL) {}
</code></pre>

<p>};
```</p>

<ul>
<li>两次遍历</li>
</ul>


<p>```cpp Add Two Numbers
class Solution {
public:</p>

<pre><code>ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    ListNode *l = new ListNode(0);
    ListNode *p = l;
    ListNode *temp = NULL;
    while(l1 &amp;&amp; l2) {
        temp = new ListNode(l1-&gt;val+l2-&gt;val);
        p-&gt;next = temp;
        p = p-&gt;next;
        l1 = l1-&gt;next;
        l2 = l2-&gt;next;
    }
    while(l1) {
        temp = new ListNode(l1-&gt;val);
        p-&gt;next = temp;
        p = p-&gt;next;
        l1 = l1-&gt;next;
    }
    while(l2) {
        temp = new ListNode(l2-&gt;val);
        p-&gt;next = temp;
        p = p-&gt;next;
        l2 = l2-&gt;next;
    }
    p = l-&gt;next;
    while(p-&gt;next) {
        if(p-&gt;val&gt;=10) {
            p-&gt;val %= 10;
            p-&gt;next-&gt;val++;
        }
        p = p-&gt;next;
    }
    if(p-&gt;val&gt;=10) {
        temp = new ListNode(p-&gt;val/10);
        p-&gt;val %= 10;
        p-&gt;next = temp;
    }
    return l-&gt;next;
}
</code></pre>

<p>};
```</p>

<ul>
<li>一次遍历</li>
</ul>


<p>```cpp Add Two Numbers
class Solution {
public:</p>

<pre><code>ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    ListNode *l = new ListNode(0);
    ListNode *p = l;
    ListNode *temp = NULL;
    int carry = 0;
    while(l1 &amp;&amp; l2) {
        temp = new ListNode((l1-&gt;val+l2-&gt;val+carry)%10);
        carry = (l1-&gt;val+l2-&gt;val+carry)/10;
        p-&gt;next = temp;
        p = p-&gt;next;
        l1 = l1-&gt;next;
        l2 = l2-&gt;next;
    }
    while(l1) {
        temp = new ListNode((l1-&gt;val+carry)%10);
        carry = (l1-&gt;val+carry)/10;
        p-&gt;next = temp;
        p = p-&gt;next;
        l1 = l1-&gt;next;
    }
    while(l2) {
        temp = new ListNode((l2-&gt;val+carry)%10);
        carry = (l2-&gt;val+carry)/10;
        p-&gt;next = temp;
        p = p-&gt;next;
        l2 = l2-&gt;next;
    }
    if(carry) {
        temp = new ListNode(carry);
        p-&gt;next = temp;
    }
    return l-&gt;next;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
</feed>
